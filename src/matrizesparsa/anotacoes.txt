I) Dos cálculos
para calcular o tempo ou o consumo levado para execuçao de um metodo,
antes da execucao do metodo, use uma variavel que guarde o tempo exato q foi executado
e depois de executar, calcule o tempo ou consumo atual - o tempo/consumo guardado nessa variavel
        ou seja:
        tempoInicial = System.currentTimeMillis();
        executaMetodo();
        tempoTotalEmMiliseg = System.currentTimeMillis() - tempoInicial);

-- System.currentTimeMillis(); 
é um valor LONG universal que pega a quantidade exata de milisegundos que se passaram 
desde january 1 1970 00:00:00 UTC (unix timestamp) - https://currentmillis.com/

-- já o calculo de consumo foi baseado nisso aqui - https://stackoverflow.com/posts/37916410/revisions 


II) Dos testes (14/02/2022)
o método gerarMatrizEstaticaAleatoria(int) foi testado em (10 vezes cada):
                      tempo de execucao           consumo médio de memoria (contem ruidos)
Matriz 10x10 -        média de 0.05 milisegundos  -- (inexpressivo)
Matriz 20x20 -        média de 0.11 milisegundos  --
Matriz 30x30 -        média de 0.16 milisegundos  --
Matriz 50x50 -        média de 0.35 milisegundos  10.4 kilobytes
Matriz 100x100 -      média de 0.63 milisegundos  31.9 kilobytes
Matriz 200x200 -      média de 1.72 milisegundos  111.5 kilobytes
Matriz 500x500 -      média de 9.85 milisegundos  978.3 kilobytes
Matriz 1000x1000 -    média de 43.2 milisegundos  1348.6 kilobytes
Matriz 10000x10000 -  média de 7.95 segundos      115625.2 kilobytes 
Matriz 20000x20000 -  média de 38.1 segundos      836817.5 kilobytes
Matriz 50000x50000 - OutOfMemoryError: Java heap space (aumentar o heap seria muito custoso)
Matriz 100000x100000 - ...

Se ao invés de int fosse por exemplo byte ou boolean a JVM na mesma 
configuraçao até poderia rodar 50000x50000.

Ainda assim o método deve funcionar mesmo para 100.000 desde que tenha 
espaço suficiente na máquina, apesar de que uma matriz desse exemplo 
custaria no mínimo 10GB de memória!

teste do método gerarMatrizDinamicaAleatoria() (~10 vezes cada):
                      tempo de execucao           consumo médio de memoria (contem ruidos)
Matriz 10x10 -        média de 0.3 milisegundos   --
Matriz 20x20 -        média de 0.4 milisegundos   --
Matriz 30x30 -        média de 0.6 milisegundos   --
Matriz 50x50 -        média de 1.1 milisegundos   29.5 kilobytes
Matriz 100x100 -      média de 2.2 milisegundos   134.4 kilobytes
Matriz 200x200 -      média de 5.0 milisegundos   507.7 kilobytes
Matriz 500x500 -      média de 15.8 milisegundos  1768.5 kilobytes
Matriz 1000x1000 -    média de 56.6 milisegundos  9425.56 kilobytes
Matriz 10000x10000 -  média de 11.8 segundos      13292.6 kilobytes
Matriz 20000x20000 -  média de 70.1 segundos      318189.5 kilobytes
Matriz 50000x50000 -  média de 10.8 MINUTOS       462096.3 kilobytes
Matriz 100000x100000 - OutOfMemoryError: Java heap space

Uma matriz quadratica de 100.000x100.000 possui espaço para 10.000.000.000 elementos
mesmo para gerar uma matriz dinâmica com 60% dos espaços preenchidos ainda seria
10.000.000.000 * 0,6 = 6.000.000.000 elementos, e sendo eles do tipo INT, ocuparia um espaço 
enorme na memória.


III) Conclusao:

As classes são aleatoriamente geradas com métodos com a mesma complexidade. 
No entanto a classe estática, apesar de ocupar muito mais espaço em relação a classe com 
lista encadeada, executa os métodos de inserçao em complexidade constante - O(1), enquanto 
a classe Dinamica insere com complexidade linear - O(n).

Por isso a Estática é mais rápida em relação a Dinâmica. 


-- 
